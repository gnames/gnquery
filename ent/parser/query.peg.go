package parser

// Code generated by peg query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTail
	ruleComponents
	ruleElement
	ruleNameVal
	ruleDSVal
	ruleAllVal
	ruleSpeciesAnyVal
	ruleSpeciesInfraVal
	ruleSpeciesVal
	ruleTaxonVal
	ruleAuVal
	ruleGenusVal
	ruleYearVal
	ruleAuthor
	ruleDataSources
	ruleAllResults
	ruleGenus
	ruleNameString
	ruleParentTaxon
	ruleSpecies
	ruleSpeciesAny
	ruleSpeciesInfra
	ruleYear
	ruleYearRange
	ruleYearNum
	ruleNumbers
	ruleNumber
	ruleBool
	ruleDigits
	ruleCaps
	ruleWord
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Tail",
	"Components",
	"Element",
	"NameVal",
	"DSVal",
	"AllVal",
	"SpeciesAnyVal",
	"SpeciesInfraVal",
	"SpeciesVal",
	"TaxonVal",
	"AuVal",
	"GenusVal",
	"YearVal",
	"Author",
	"DataSources",
	"AllResults",
	"Genus",
	"NameString",
	"ParentTaxon",
	"Species",
	"SpeciesAny",
	"SpeciesInfra",
	"Year",
	"YearRange",
	"YearNum",
	"Numbers",
	"Number",
	"Bool",
	"Digits",
	"Caps",
	"Word",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type engine struct {
	Buffer string
	buffer []rune
	rules  [37]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*engine) error {
	return func(p *engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*engine) error {
	return func(p *engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *engine) Init(options ...func(*engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(_? Components Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleComponents]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <(_ .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[rule_]() {
						goto l6
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !matchDot() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Components <- <(Element (_ Element)*)> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[ruleElement]() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[rule_]() {
						goto l13
					}
					if !_rules[ruleElement]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				add(ruleComponents, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 Element <- <((NameString NameVal) / (DataSources DSVal) / (Year YearVal) / (AllResults AllVal) / (Genus GenusVal) / (Species SpeciesVal) / (SpeciesInfra SpeciesInfraVal) / (SpeciesAny SpeciesAnyVal) / (Author AuVal) / (ParentTaxon TaxonVal))> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				{
					position16, tokenIndex16 := position, tokenIndex
					if !_rules[ruleNameString]() {
						goto l17
					}
					if !_rules[ruleNameVal]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleDataSources]() {
						goto l18
					}
					if !_rules[ruleDSVal]() {
						goto l18
					}
					goto l16
				l18:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleYear]() {
						goto l19
					}
					if !_rules[ruleYearVal]() {
						goto l19
					}
					goto l16
				l19:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleAllResults]() {
						goto l20
					}
					if !_rules[ruleAllVal]() {
						goto l20
					}
					goto l16
				l20:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleGenus]() {
						goto l21
					}
					if !_rules[ruleGenusVal]() {
						goto l21
					}
					goto l16
				l21:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpecies]() {
						goto l22
					}
					if !_rules[ruleSpeciesVal]() {
						goto l22
					}
					goto l16
				l22:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpeciesInfra]() {
						goto l23
					}
					if !_rules[ruleSpeciesInfraVal]() {
						goto l23
					}
					goto l16
				l23:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpeciesAny]() {
						goto l24
					}
					if !_rules[ruleSpeciesAnyVal]() {
						goto l24
					}
					goto l16
				l24:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleAuthor]() {
						goto l25
					}
					if !_rules[ruleAuVal]() {
						goto l25
					}
					goto l16
				l25:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleParentTaxon]() {
						goto l14
					}
					if !_rules[ruleTaxonVal]() {
						goto l14
					}
				}
			l16:
				add(ruleElement, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 NameVal <- <(GenusVal _ SpeciesVal (_ SpeciesInfraVal)? (_ AuVal)? (_ YearVal)?)> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				if !_rules[ruleGenusVal]() {
					goto l26
				}
				if !_rules[rule_]() {
					goto l26
				}
				if !_rules[ruleSpeciesVal]() {
					goto l26
				}
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[rule_]() {
						goto l28
					}
					if !_rules[ruleSpeciesInfraVal]() {
						goto l28
					}
					goto l29
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[rule_]() {
						goto l30
					}
					if !_rules[ruleAuVal]() {
						goto l30
					}
					goto l31
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[rule_]() {
						goto l32
					}
					if !_rules[ruleYearVal]() {
						goto l32
					}
					goto l33
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
			l33:
				add(ruleNameVal, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 5 DSVal <- <Numbers> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if !_rules[ruleNumbers]() {
					goto l34
				}
				add(ruleDSVal, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 6 AllVal <- <Bool> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleBool]() {
					goto l36
				}
				add(ruleAllVal, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 7 SpeciesAnyVal <- <Word> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[ruleWord]() {
					goto l38
				}
				add(ruleSpeciesAnyVal, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 8 SpeciesInfraVal <- <Word> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[ruleWord]() {
					goto l40
				}
				add(ruleSpeciesInfraVal, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 SpeciesVal <- <Word> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleWord]() {
					goto l42
				}
				add(ruleSpeciesVal, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 TaxonVal <- <(Caps Word)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleCaps]() {
					goto l44
				}
				if !_rules[ruleWord]() {
					goto l44
				}
				add(ruleTaxonVal, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 11 AuVal <- <(Caps Word?)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleCaps]() {
					goto l46
				}
				{
					position48, tokenIndex48 := position, tokenIndex
					if !_rules[ruleWord]() {
						goto l48
					}
					goto l49
				l48:
					position, tokenIndex = position48, tokenIndex48
				}
			l49:
				add(ruleAuVal, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 12 GenusVal <- <(Caps Word)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				if !_rules[ruleCaps]() {
					goto l50
				}
				if !_rules[ruleWord]() {
					goto l50
				}
				add(ruleGenusVal, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 13 YearVal <- <(YearRange / YearNum)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				{
					position54, tokenIndex54 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l55
					}
					goto l54
				l55:
					position, tokenIndex = position54, tokenIndex54
					if !_rules[ruleYearNum]() {
						goto l52
					}
				}
			l54:
				add(ruleYearVal, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 14 Author <- <('a' 'u' ':')> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune('a') {
					goto l56
				}
				position++
				if buffer[position] != rune('u') {
					goto l56
				}
				position++
				if buffer[position] != rune(':') {
					goto l56
				}
				position++
				add(ruleAuthor, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 15 DataSources <- <('d' 's' ':')> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('d') {
					goto l58
				}
				position++
				if buffer[position] != rune('s') {
					goto l58
				}
				position++
				if buffer[position] != rune(':') {
					goto l58
				}
				position++
				add(ruleDataSources, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 16 AllResults <- <('a' 'l' 'l' ':')> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if buffer[position] != rune('a') {
					goto l60
				}
				position++
				if buffer[position] != rune('l') {
					goto l60
				}
				position++
				if buffer[position] != rune('l') {
					goto l60
				}
				position++
				if buffer[position] != rune(':') {
					goto l60
				}
				position++
				add(ruleAllResults, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 17 Genus <- <(('g' 'e' 'n' ':') / ('g' ':'))> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				{
					position64, tokenIndex64 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l65
					}
					position++
					if buffer[position] != rune('e') {
						goto l65
					}
					position++
					if buffer[position] != rune('n') {
						goto l65
					}
					position++
					if buffer[position] != rune(':') {
						goto l65
					}
					position++
					goto l64
				l65:
					position, tokenIndex = position64, tokenIndex64
					if buffer[position] != rune('g') {
						goto l62
					}
					position++
					if buffer[position] != rune(':') {
						goto l62
					}
					position++
				}
			l64:
				add(ruleGenus, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 18 NameString <- <('n' ':')> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				if buffer[position] != rune('n') {
					goto l66
				}
				position++
				if buffer[position] != rune(':') {
					goto l66
				}
				position++
				add(ruleNameString, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 19 ParentTaxon <- <('t' 'x' ':')> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				if buffer[position] != rune('t') {
					goto l68
				}
				position++
				if buffer[position] != rune('x') {
					goto l68
				}
				position++
				if buffer[position] != rune(':') {
					goto l68
				}
				position++
				add(ruleParentTaxon, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 20 Species <- <('s' 'p' ':')> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				if buffer[position] != rune('s') {
					goto l70
				}
				position++
				if buffer[position] != rune('p') {
					goto l70
				}
				position++
				if buffer[position] != rune(':') {
					goto l70
				}
				position++
				add(ruleSpecies, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 21 SpeciesAny <- <('a' 's' 'p' ':')> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				if buffer[position] != rune('a') {
					goto l72
				}
				position++
				if buffer[position] != rune('s') {
					goto l72
				}
				position++
				if buffer[position] != rune('p') {
					goto l72
				}
				position++
				if buffer[position] != rune(':') {
					goto l72
				}
				position++
				add(ruleSpeciesAny, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 22 SpeciesInfra <- <('i' 's' 'p' ':')> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				if buffer[position] != rune('i') {
					goto l74
				}
				position++
				if buffer[position] != rune('s') {
					goto l74
				}
				position++
				if buffer[position] != rune('p') {
					goto l74
				}
				position++
				if buffer[position] != rune(':') {
					goto l74
				}
				position++
				add(ruleSpeciesInfra, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 23 Year <- <(('y' 'r' ':') / ('y' ':'))> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				{
					position78, tokenIndex78 := position, tokenIndex
					if buffer[position] != rune('y') {
						goto l79
					}
					position++
					if buffer[position] != rune('r') {
						goto l79
					}
					position++
					if buffer[position] != rune(':') {
						goto l79
					}
					position++
					goto l78
				l79:
					position, tokenIndex = position78, tokenIndex78
					if buffer[position] != rune('y') {
						goto l76
					}
					position++
					if buffer[position] != rune(':') {
						goto l76
					}
					position++
				}
			l78:
				add(ruleYear, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 24 YearRange <- <(('-' YearNum) / (YearNum '-' YearNum?))> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l83
					}
					position++
					if !_rules[ruleYearNum]() {
						goto l83
					}
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if !_rules[ruleYearNum]() {
						goto l80
					}
					if buffer[position] != rune('-') {
						goto l80
					}
					position++
					{
						position84, tokenIndex84 := position, tokenIndex
						if !_rules[ruleYearNum]() {
							goto l84
						}
						goto l85
					l84:
						position, tokenIndex = position84, tokenIndex84
					}
				l85:
				}
			l82:
				add(ruleYearRange, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 25 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Digits Digits)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				{
					position88, tokenIndex88 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l89
					}
					position++
					goto l88
				l89:
					position, tokenIndex = position88, tokenIndex88
					if buffer[position] != rune('2') {
						goto l86
					}
					position++
				}
			l88:
				{
					position90, tokenIndex90 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l91
					}
					position++
					goto l90
				l91:
					position, tokenIndex = position90, tokenIndex90
					if buffer[position] != rune('7') {
						goto l92
					}
					position++
					goto l90
				l92:
					position, tokenIndex = position90, tokenIndex90
					if buffer[position] != rune('8') {
						goto l93
					}
					position++
					goto l90
				l93:
					position, tokenIndex = position90, tokenIndex90
					if buffer[position] != rune('9') {
						goto l86
					}
					position++
				}
			l90:
				if !_rules[ruleDigits]() {
					goto l86
				}
				if !_rules[ruleDigits]() {
					goto l86
				}
				add(ruleYearNum, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 26 Numbers <- <(Number (',' Number)*)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if !_rules[ruleNumber]() {
					goto l94
				}
			l96:
				{
					position97, tokenIndex97 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l97
					}
					position++
					if !_rules[ruleNumber]() {
						goto l97
					}
					goto l96
				l97:
					position, tokenIndex = position97, tokenIndex97
				}
				add(ruleNumbers, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 27 Number <- <[0-9]+> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l98
				}
				position++
			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l101
					}
					position++
					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				add(ruleNumber, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 28 Bool <- <(('t' 'r' 'u' 'e') / 't' / ('f' 'a' 'l' 's' 'e') / 'f')> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l105
					}
					position++
					if buffer[position] != rune('r') {
						goto l105
					}
					position++
					if buffer[position] != rune('u') {
						goto l105
					}
					position++
					if buffer[position] != rune('e') {
						goto l105
					}
					position++
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('t') {
						goto l106
					}
					position++
					goto l104
				l106:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('f') {
						goto l107
					}
					position++
					if buffer[position] != rune('a') {
						goto l107
					}
					position++
					if buffer[position] != rune('l') {
						goto l107
					}
					position++
					if buffer[position] != rune('s') {
						goto l107
					}
					position++
					if buffer[position] != rune('e') {
						goto l107
					}
					position++
					goto l104
				l107:
					position, tokenIndex = position104, tokenIndex104
					if buffer[position] != rune('f') {
						goto l102
					}
					position++
				}
			l104:
				add(ruleBool, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 29 Digits <- <[0-9]> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l108
				}
				position++
				add(ruleDigits, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 30 Caps <- <([A-Z] / 'À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Œ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț')> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112, tokenIndex112 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l113
					}
					position++
					goto l112
				l113:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('À') {
						goto l114
					}
					position++
					goto l112
				l114:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Á') {
						goto l115
					}
					position++
					goto l112
				l115:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Â') {
						goto l116
					}
					position++
					goto l112
				l116:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ã') {
						goto l117
					}
					position++
					goto l112
				l117:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ä') {
						goto l118
					}
					position++
					goto l112
				l118:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Å') {
						goto l119
					}
					position++
					goto l112
				l119:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Æ') {
						goto l120
					}
					position++
					goto l112
				l120:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ç') {
						goto l121
					}
					position++
					goto l112
				l121:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('È') {
						goto l122
					}
					position++
					goto l112
				l122:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('É') {
						goto l123
					}
					position++
					goto l112
				l123:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ê') {
						goto l124
					}
					position++
					goto l112
				l124:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ë') {
						goto l125
					}
					position++
					goto l112
				l125:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ì') {
						goto l126
					}
					position++
					goto l112
				l126:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Í') {
						goto l127
					}
					position++
					goto l112
				l127:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Î') {
						goto l128
					}
					position++
					goto l112
				l128:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ï') {
						goto l129
					}
					position++
					goto l112
				l129:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ð') {
						goto l130
					}
					position++
					goto l112
				l130:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ñ') {
						goto l131
					}
					position++
					goto l112
				l131:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Œ') {
						goto l132
					}
					position++
					goto l112
				l132:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ò') {
						goto l133
					}
					position++
					goto l112
				l133:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ó') {
						goto l134
					}
					position++
					goto l112
				l134:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ô') {
						goto l135
					}
					position++
					goto l112
				l135:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Õ') {
						goto l136
					}
					position++
					goto l112
				l136:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ö') {
						goto l137
					}
					position++
					goto l112
				l137:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ø') {
						goto l138
					}
					position++
					goto l112
				l138:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ù') {
						goto l139
					}
					position++
					goto l112
				l139:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ú') {
						goto l140
					}
					position++
					goto l112
				l140:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Û') {
						goto l141
					}
					position++
					goto l112
				l141:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ü') {
						goto l142
					}
					position++
					goto l112
				l142:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ý') {
						goto l143
					}
					position++
					goto l112
				l143:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ć') {
						goto l144
					}
					position++
					goto l112
				l144:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Č') {
						goto l145
					}
					position++
					goto l112
				l145:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ď') {
						goto l146
					}
					position++
					goto l112
				l146:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('İ') {
						goto l147
					}
					position++
					goto l112
				l147:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ķ') {
						goto l148
					}
					position++
					goto l112
				l148:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ĺ') {
						goto l149
					}
					position++
					goto l112
				l149:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('ĺ') {
						goto l150
					}
					position++
					goto l112
				l150:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ľ') {
						goto l151
					}
					position++
					goto l112
				l151:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('ľ') {
						goto l152
					}
					position++
					goto l112
				l152:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ł') {
						goto l153
					}
					position++
					goto l112
				l153:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('ł') {
						goto l154
					}
					position++
					goto l112
				l154:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ņ') {
						goto l155
					}
					position++
					goto l112
				l155:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ō') {
						goto l156
					}
					position++
					goto l112
				l156:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ő') {
						goto l157
					}
					position++
					goto l112
				l157:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Œ') {
						goto l158
					}
					position++
					goto l112
				l158:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ř') {
						goto l159
					}
					position++
					goto l112
				l159:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ś') {
						goto l160
					}
					position++
					goto l112
				l160:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ŝ') {
						goto l161
					}
					position++
					goto l112
				l161:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ş') {
						goto l162
					}
					position++
					goto l112
				l162:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Š') {
						goto l163
					}
					position++
					goto l112
				l163:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ÿ') {
						goto l164
					}
					position++
					goto l112
				l164:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ź') {
						goto l165
					}
					position++
					goto l112
				l165:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ż') {
						goto l166
					}
					position++
					goto l112
				l166:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ž') {
						goto l167
					}
					position++
					goto l112
				l167:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('ƒ') {
						goto l168
					}
					position++
					goto l112
				l168:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ǿ') {
						goto l169
					}
					position++
					goto l112
				l169:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ș') {
						goto l170
					}
					position++
					goto l112
				l170:
					position, tokenIndex = position112, tokenIndex112
					if buffer[position] != rune('Ț') {
						goto l110
					}
					position++
				}
			l112:
				add(ruleCaps, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 31 Word <- <(!([A-Z] / [1-9] / '-' / ':' / ' ') . (!([1-9] / ':' / ' ') .)* &(_ / END))> */
		func() bool {
			position171, tokenIndex171 := position, tokenIndex
			{
				position172 := position
				{
					position173, tokenIndex173 := position, tokenIndex
					{
						position174, tokenIndex174 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l175
						}
						position++
						goto l174
					l175:
						position, tokenIndex = position174, tokenIndex174
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l176
						}
						position++
						goto l174
					l176:
						position, tokenIndex = position174, tokenIndex174
						if buffer[position] != rune('-') {
							goto l177
						}
						position++
						goto l174
					l177:
						position, tokenIndex = position174, tokenIndex174
						if buffer[position] != rune(':') {
							goto l178
						}
						position++
						goto l174
					l178:
						position, tokenIndex = position174, tokenIndex174
						if buffer[position] != rune(' ') {
							goto l173
						}
						position++
					}
				l174:
					goto l171
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				if !matchDot() {
					goto l171
				}
			l179:
				{
					position180, tokenIndex180 := position, tokenIndex
					{
						position181, tokenIndex181 := position, tokenIndex
						{
							position182, tokenIndex182 := position, tokenIndex
							if c := buffer[position]; c < rune('1') || c > rune('9') {
								goto l183
							}
							position++
							goto l182
						l183:
							position, tokenIndex = position182, tokenIndex182
							if buffer[position] != rune(':') {
								goto l184
							}
							position++
							goto l182
						l184:
							position, tokenIndex = position182, tokenIndex182
							if buffer[position] != rune(' ') {
								goto l181
							}
							position++
						}
					l182:
						goto l180
					l181:
						position, tokenIndex = position181, tokenIndex181
					}
					if !matchDot() {
						goto l180
					}
					goto l179
				l180:
					position, tokenIndex = position180, tokenIndex180
				}
				{
					position185, tokenIndex185 := position, tokenIndex
					{
						position186, tokenIndex186 := position, tokenIndex
						if !_rules[rule_]() {
							goto l187
						}
						goto l186
					l187:
						position, tokenIndex = position186, tokenIndex186
						if !_rules[ruleEND]() {
							goto l171
						}
					}
				l186:
					position, tokenIndex = position185, tokenIndex185
				}
				add(ruleWord, position172)
			}
			return true
		l171:
			position, tokenIndex = position171, tokenIndex171
			return false
		},
		/* 32 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position188, tokenIndex188 := position, tokenIndex
			{
				position189 := position
				{
					position190, tokenIndex190 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l191
					}
					goto l190
				l191:
					position, tokenIndex = position190, tokenIndex190
					if !_rules[ruleSingleSpace]() {
						goto l188
					}
				}
			l190:
				add(rule_, position189)
			}
			return true
		l188:
			position, tokenIndex = position188, tokenIndex188
			return false
		},
		/* 33 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position192, tokenIndex192 := position, tokenIndex
			{
				position193 := position
				if !_rules[ruleSingleSpace]() {
					goto l192
				}
				if !_rules[ruleSingleSpace]() {
					goto l192
				}
			l194:
				{
					position195, tokenIndex195 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l195
					}
					goto l194
				l195:
					position, tokenIndex = position195, tokenIndex195
				}
				add(ruleMultipleSpace, position193)
			}
			return true
		l192:
			position, tokenIndex = position192, tokenIndex192
			return false
		},
		/* 34 SingleSpace <- <' '> */
		func() bool {
			position196, tokenIndex196 := position, tokenIndex
			{
				position197 := position
				if buffer[position] != rune(' ') {
					goto l196
				}
				position++
				add(ruleSingleSpace, position197)
			}
			return true
		l196:
			position, tokenIndex = position196, tokenIndex196
			return false
		},
		/* 35 END <- <!.> */
		func() bool {
			position198, tokenIndex198 := position, tokenIndex
			{
				position199 := position
				{
					position200, tokenIndex200 := position, tokenIndex
					if !matchDot() {
						goto l200
					}
					goto l198
				l200:
					position, tokenIndex = position200, tokenIndex200
				}
				add(ruleEND, position199)
			}
			return true
		l198:
			position, tokenIndex = position198, tokenIndex198
			return false
		},
	}
	p.rules = _rules
	return nil
}
