package parser

// Code generated by peg query.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleQuery
	ruleTail
	ruleComponents
	ruleElement
	ruleNameVal
	ruleDSVal
	ruleAllVal
	ruleSpeciesAnyVal
	ruleSpeciesInfraVal
	ruleSpeciesVal
	ruleTaxonVal
	ruleAuVal
	ruleGenusVal
	ruleYearVal
	ruleAuthor
	ruleDataSources
	ruleAllResults
	ruleGenus
	ruleNameString
	ruleParentTaxon
	ruleSpecies
	ruleSpeciesAny
	ruleSpeciesInfra
	ruleYear
	ruleYearRange
	ruleYearNum
	ruleNumbers
	ruleNumber
	ruleBool
	ruleDigits
	ruleCapsWord
	ruleWord
	rule_
	ruleMultipleSpace
	ruleSingleSpace
	ruleEND
)

var rul3s = [...]string{
	"Unknown",
	"Query",
	"Tail",
	"Components",
	"Element",
	"NameVal",
	"DSVal",
	"AllVal",
	"SpeciesAnyVal",
	"SpeciesInfraVal",
	"SpeciesVal",
	"TaxonVal",
	"AuVal",
	"GenusVal",
	"YearVal",
	"Author",
	"DataSources",
	"AllResults",
	"Genus",
	"NameString",
	"ParentTaxon",
	"Species",
	"SpeciesAny",
	"SpeciesInfra",
	"Year",
	"YearRange",
	"YearNum",
	"Numbers",
	"Number",
	"Bool",
	"Digits",
	"CapsWord",
	"Word",
	"_",
	"MultipleSpace",
	"SingleSpace",
	"END",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type engine struct {
	Buffer string
	buffer []rune
	rules  [37]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *engine) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *engine) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *engine
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *engine) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *engine) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *engine) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*engine) error {
	return func(p *engine) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*engine) error {
	return func(p *engine) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *engine) Init(options ...func(*engine) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 Query <- <(_? Components Tail END)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					if !_rules[rule_]() {
						goto l2
					}
					goto l3
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
			l3:
				if !_rules[ruleComponents]() {
					goto l0
				}
				if !_rules[ruleTail]() {
					goto l0
				}
				if !_rules[ruleEND]() {
					goto l0
				}
				add(ruleQuery, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Tail <- <(_ .*)?> */
		func() bool {
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[rule_]() {
						goto l6
					}
				l8:
					{
						position9, tokenIndex9 := position, tokenIndex
						if !matchDot() {
							goto l9
						}
						goto l8
					l9:
						position, tokenIndex = position9, tokenIndex9
					}
					goto l7
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
			l7:
				add(ruleTail, position5)
			}
			return true
		},
		/* 2 Components <- <(Element (_ Element)*)> */
		func() bool {
			position10, tokenIndex10 := position, tokenIndex
			{
				position11 := position
				if !_rules[ruleElement]() {
					goto l10
				}
			l12:
				{
					position13, tokenIndex13 := position, tokenIndex
					if !_rules[rule_]() {
						goto l13
					}
					if !_rules[ruleElement]() {
						goto l13
					}
					goto l12
				l13:
					position, tokenIndex = position13, tokenIndex13
				}
				add(ruleComponents, position11)
			}
			return true
		l10:
			position, tokenIndex = position10, tokenIndex10
			return false
		},
		/* 3 Element <- <((NameString NameVal) / (DataSources DSVal) / (Year YearVal) / (AllResults AllVal) / (Genus GenusVal) / (Species SpeciesVal) / (SpeciesInfra SpeciesInfraVal) / (SpeciesAny SpeciesAnyVal) / (Author AuVal) / (ParentTaxon TaxonVal))> */
		func() bool {
			position14, tokenIndex14 := position, tokenIndex
			{
				position15 := position
				{
					position16, tokenIndex16 := position, tokenIndex
					if !_rules[ruleNameString]() {
						goto l17
					}
					if !_rules[ruleNameVal]() {
						goto l17
					}
					goto l16
				l17:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleDataSources]() {
						goto l18
					}
					if !_rules[ruleDSVal]() {
						goto l18
					}
					goto l16
				l18:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleYear]() {
						goto l19
					}
					if !_rules[ruleYearVal]() {
						goto l19
					}
					goto l16
				l19:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleAllResults]() {
						goto l20
					}
					if !_rules[ruleAllVal]() {
						goto l20
					}
					goto l16
				l20:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleGenus]() {
						goto l21
					}
					if !_rules[ruleGenusVal]() {
						goto l21
					}
					goto l16
				l21:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpecies]() {
						goto l22
					}
					if !_rules[ruleSpeciesVal]() {
						goto l22
					}
					goto l16
				l22:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpeciesInfra]() {
						goto l23
					}
					if !_rules[ruleSpeciesInfraVal]() {
						goto l23
					}
					goto l16
				l23:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleSpeciesAny]() {
						goto l24
					}
					if !_rules[ruleSpeciesAnyVal]() {
						goto l24
					}
					goto l16
				l24:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleAuthor]() {
						goto l25
					}
					if !_rules[ruleAuVal]() {
						goto l25
					}
					goto l16
				l25:
					position, tokenIndex = position16, tokenIndex16
					if !_rules[ruleParentTaxon]() {
						goto l14
					}
					if !_rules[ruleTaxonVal]() {
						goto l14
					}
				}
			l16:
				add(ruleElement, position15)
			}
			return true
		l14:
			position, tokenIndex = position14, tokenIndex14
			return false
		},
		/* 4 NameVal <- <(GenusVal SpeciesVal SpeciesInfraVal? AuVal? YearVal?)> */
		func() bool {
			position26, tokenIndex26 := position, tokenIndex
			{
				position27 := position
				if !_rules[ruleGenusVal]() {
					goto l26
				}
				if !_rules[ruleSpeciesVal]() {
					goto l26
				}
				{
					position28, tokenIndex28 := position, tokenIndex
					if !_rules[ruleSpeciesInfraVal]() {
						goto l28
					}
					goto l29
				l28:
					position, tokenIndex = position28, tokenIndex28
				}
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					if !_rules[ruleAuVal]() {
						goto l30
					}
					goto l31
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
			l31:
				{
					position32, tokenIndex32 := position, tokenIndex
					if !_rules[ruleYearVal]() {
						goto l32
					}
					goto l33
				l32:
					position, tokenIndex = position32, tokenIndex32
				}
			l33:
				add(ruleNameVal, position27)
			}
			return true
		l26:
			position, tokenIndex = position26, tokenIndex26
			return false
		},
		/* 5 DSVal <- <Numbers> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if !_rules[ruleNumbers]() {
					goto l34
				}
				add(ruleDSVal, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 6 AllVal <- <Bool> */
		func() bool {
			position36, tokenIndex36 := position, tokenIndex
			{
				position37 := position
				if !_rules[ruleBool]() {
					goto l36
				}
				add(ruleAllVal, position37)
			}
			return true
		l36:
			position, tokenIndex = position36, tokenIndex36
			return false
		},
		/* 7 SpeciesAnyVal <- <Word> */
		func() bool {
			position38, tokenIndex38 := position, tokenIndex
			{
				position39 := position
				if !_rules[ruleWord]() {
					goto l38
				}
				add(ruleSpeciesAnyVal, position39)
			}
			return true
		l38:
			position, tokenIndex = position38, tokenIndex38
			return false
		},
		/* 8 SpeciesInfraVal <- <Word> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if !_rules[ruleWord]() {
					goto l40
				}
				add(ruleSpeciesInfraVal, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 9 SpeciesVal <- <Word> */
		func() bool {
			position42, tokenIndex42 := position, tokenIndex
			{
				position43 := position
				if !_rules[ruleWord]() {
					goto l42
				}
				add(ruleSpeciesVal, position43)
			}
			return true
		l42:
			position, tokenIndex = position42, tokenIndex42
			return false
		},
		/* 10 TaxonVal <- <CapsWord> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				if !_rules[ruleCapsWord]() {
					goto l44
				}
				add(ruleTaxonVal, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 11 AuVal <- <CapsWord> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				if !_rules[ruleCapsWord]() {
					goto l46
				}
				add(ruleAuVal, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 12 GenusVal <- <CapsWord> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if !_rules[ruleCapsWord]() {
					goto l48
				}
				add(ruleGenusVal, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 13 YearVal <- <(YearRange / YearNum)> */
		func() bool {
			position50, tokenIndex50 := position, tokenIndex
			{
				position51 := position
				{
					position52, tokenIndex52 := position, tokenIndex
					if !_rules[ruleYearRange]() {
						goto l53
					}
					goto l52
				l53:
					position, tokenIndex = position52, tokenIndex52
					if !_rules[ruleYearNum]() {
						goto l50
					}
				}
			l52:
				add(ruleYearVal, position51)
			}
			return true
		l50:
			position, tokenIndex = position50, tokenIndex50
			return false
		},
		/* 14 Author <- <('a' 'u' ':')> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if buffer[position] != rune('a') {
					goto l54
				}
				position++
				if buffer[position] != rune('u') {
					goto l54
				}
				position++
				if buffer[position] != rune(':') {
					goto l54
				}
				position++
				add(ruleAuthor, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 15 DataSources <- <('d' 's' ':')> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune('d') {
					goto l56
				}
				position++
				if buffer[position] != rune('s') {
					goto l56
				}
				position++
				if buffer[position] != rune(':') {
					goto l56
				}
				position++
				add(ruleDataSources, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 16 AllResults <- <('a' 'l' 'l' ':')> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if buffer[position] != rune('a') {
					goto l58
				}
				position++
				if buffer[position] != rune('l') {
					goto l58
				}
				position++
				if buffer[position] != rune('l') {
					goto l58
				}
				position++
				if buffer[position] != rune(':') {
					goto l58
				}
				position++
				add(ruleAllResults, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 17 Genus <- <(('g' 'e' 'n' ':') / ('g' ':'))> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				{
					position62, tokenIndex62 := position, tokenIndex
					if buffer[position] != rune('g') {
						goto l63
					}
					position++
					if buffer[position] != rune('e') {
						goto l63
					}
					position++
					if buffer[position] != rune('n') {
						goto l63
					}
					position++
					if buffer[position] != rune(':') {
						goto l63
					}
					position++
					goto l62
				l63:
					position, tokenIndex = position62, tokenIndex62
					if buffer[position] != rune('g') {
						goto l60
					}
					position++
					if buffer[position] != rune(':') {
						goto l60
					}
					position++
				}
			l62:
				add(ruleGenus, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 18 NameString <- <('n' ':')> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if buffer[position] != rune('n') {
					goto l64
				}
				position++
				if buffer[position] != rune(':') {
					goto l64
				}
				position++
				add(ruleNameString, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 19 ParentTaxon <- <('t' 'x' ':')> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				if buffer[position] != rune('t') {
					goto l66
				}
				position++
				if buffer[position] != rune('x') {
					goto l66
				}
				position++
				if buffer[position] != rune(':') {
					goto l66
				}
				position++
				add(ruleParentTaxon, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 20 Species <- <('s' 'p' ':')> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				if buffer[position] != rune('s') {
					goto l68
				}
				position++
				if buffer[position] != rune('p') {
					goto l68
				}
				position++
				if buffer[position] != rune(':') {
					goto l68
				}
				position++
				add(ruleSpecies, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 21 SpeciesAny <- <('a' 's' 'p' ':')> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				if buffer[position] != rune('a') {
					goto l70
				}
				position++
				if buffer[position] != rune('s') {
					goto l70
				}
				position++
				if buffer[position] != rune('p') {
					goto l70
				}
				position++
				if buffer[position] != rune(':') {
					goto l70
				}
				position++
				add(ruleSpeciesAny, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 22 SpeciesInfra <- <('i' 's' 'p' ':')> */
		func() bool {
			position72, tokenIndex72 := position, tokenIndex
			{
				position73 := position
				if buffer[position] != rune('i') {
					goto l72
				}
				position++
				if buffer[position] != rune('s') {
					goto l72
				}
				position++
				if buffer[position] != rune('p') {
					goto l72
				}
				position++
				if buffer[position] != rune(':') {
					goto l72
				}
				position++
				add(ruleSpeciesInfra, position73)
			}
			return true
		l72:
			position, tokenIndex = position72, tokenIndex72
			return false
		},
		/* 23 Year <- <(('y' 'r' ':') / ('y' ':'))> */
		func() bool {
			position74, tokenIndex74 := position, tokenIndex
			{
				position75 := position
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('y') {
						goto l77
					}
					position++
					if buffer[position] != rune('r') {
						goto l77
					}
					position++
					if buffer[position] != rune(':') {
						goto l77
					}
					position++
					goto l76
				l77:
					position, tokenIndex = position76, tokenIndex76
					if buffer[position] != rune('y') {
						goto l74
					}
					position++
					if buffer[position] != rune(':') {
						goto l74
					}
					position++
				}
			l76:
				add(ruleYear, position75)
			}
			return true
		l74:
			position, tokenIndex = position74, tokenIndex74
			return false
		},
		/* 24 YearRange <- <(('-' YearNum) / (YearNum '-' YearNum?))> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				{
					position80, tokenIndex80 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l81
					}
					position++
					if !_rules[ruleYearNum]() {
						goto l81
					}
					goto l80
				l81:
					position, tokenIndex = position80, tokenIndex80
					if !_rules[ruleYearNum]() {
						goto l78
					}
					if buffer[position] != rune('-') {
						goto l78
					}
					position++
					{
						position82, tokenIndex82 := position, tokenIndex
						if !_rules[ruleYearNum]() {
							goto l82
						}
						goto l83
					l82:
						position, tokenIndex = position82, tokenIndex82
					}
				l83:
				}
			l80:
				add(ruleYearRange, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 25 YearNum <- <(('1' / '2') ('0' / '7' / '8' / '9') Digits Digits)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				{
					position86, tokenIndex86 := position, tokenIndex
					if buffer[position] != rune('1') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if buffer[position] != rune('2') {
						goto l84
					}
					position++
				}
			l86:
				{
					position88, tokenIndex88 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l89
					}
					position++
					goto l88
				l89:
					position, tokenIndex = position88, tokenIndex88
					if buffer[position] != rune('7') {
						goto l90
					}
					position++
					goto l88
				l90:
					position, tokenIndex = position88, tokenIndex88
					if buffer[position] != rune('8') {
						goto l91
					}
					position++
					goto l88
				l91:
					position, tokenIndex = position88, tokenIndex88
					if buffer[position] != rune('9') {
						goto l84
					}
					position++
				}
			l88:
				if !_rules[ruleDigits]() {
					goto l84
				}
				if !_rules[ruleDigits]() {
					goto l84
				}
				add(ruleYearNum, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 26 Numbers <- <(Number (',' Number)*)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if !_rules[ruleNumber]() {
					goto l92
				}
			l94:
				{
					position95, tokenIndex95 := position, tokenIndex
					if buffer[position] != rune(',') {
						goto l95
					}
					position++
					if !_rules[ruleNumber]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
				add(ruleNumbers, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 27 Number <- <[0-9]+> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l96
				}
				position++
			l98:
				{
					position99, tokenIndex99 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l99
					}
					position++
					goto l98
				l99:
					position, tokenIndex = position99, tokenIndex99
				}
				add(ruleNumber, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 28 Bool <- <(('t' 'r' 'u' 'e') / 't' / ('f' 'a' 'l' 's' 'e') / 'f')> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				{
					position102, tokenIndex102 := position, tokenIndex
					if buffer[position] != rune('t') {
						goto l103
					}
					position++
					if buffer[position] != rune('r') {
						goto l103
					}
					position++
					if buffer[position] != rune('u') {
						goto l103
					}
					position++
					if buffer[position] != rune('e') {
						goto l103
					}
					position++
					goto l102
				l103:
					position, tokenIndex = position102, tokenIndex102
					if buffer[position] != rune('t') {
						goto l104
					}
					position++
					goto l102
				l104:
					position, tokenIndex = position102, tokenIndex102
					if buffer[position] != rune('f') {
						goto l105
					}
					position++
					if buffer[position] != rune('a') {
						goto l105
					}
					position++
					if buffer[position] != rune('l') {
						goto l105
					}
					position++
					if buffer[position] != rune('s') {
						goto l105
					}
					position++
					if buffer[position] != rune('e') {
						goto l105
					}
					position++
					goto l102
				l105:
					position, tokenIndex = position102, tokenIndex102
					if buffer[position] != rune('f') {
						goto l100
					}
					position++
				}
			l102:
				add(ruleBool, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 29 Digits <- <[0-9]> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l106
				}
				position++
				add(ruleDigits, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 30 CapsWord <- <(([A-Z] / 'À' / 'Á' / 'Â' / 'Ã' / 'Ä' / 'Å' / 'Æ' / 'Ç' / 'È' / 'É' / 'Ê' / 'Ë' / 'Ì' / 'Í' / 'Î' / 'Ï' / 'Ð' / 'Ñ' / 'Œ' / 'Ò' / 'Ó' / 'Ô' / 'Õ' / 'Ö' / 'Ø' / 'Ù' / 'Ú' / 'Û' / 'Ü' / 'Ý' / 'Ć' / 'Č' / 'Ď' / 'İ' / 'Ķ' / 'Ĺ' / 'ĺ' / 'Ľ' / 'ľ' / 'Ł' / 'ł' / 'Ņ' / 'Ō' / 'Ő' / 'Œ' / 'Ř' / 'Ś' / 'Ŝ' / 'Ş' / 'Š' / 'Ÿ' / 'Ź' / 'Ż' / 'Ž' / 'ƒ' / 'Ǿ' / 'Ș' / 'Ț') Word)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				{
					position110, tokenIndex110 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l111
					}
					position++
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('À') {
						goto l112
					}
					position++
					goto l110
				l112:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Á') {
						goto l113
					}
					position++
					goto l110
				l113:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Â') {
						goto l114
					}
					position++
					goto l110
				l114:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ã') {
						goto l115
					}
					position++
					goto l110
				l115:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ä') {
						goto l116
					}
					position++
					goto l110
				l116:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Å') {
						goto l117
					}
					position++
					goto l110
				l117:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Æ') {
						goto l118
					}
					position++
					goto l110
				l118:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ç') {
						goto l119
					}
					position++
					goto l110
				l119:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('È') {
						goto l120
					}
					position++
					goto l110
				l120:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('É') {
						goto l121
					}
					position++
					goto l110
				l121:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ê') {
						goto l122
					}
					position++
					goto l110
				l122:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ë') {
						goto l123
					}
					position++
					goto l110
				l123:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ì') {
						goto l124
					}
					position++
					goto l110
				l124:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Í') {
						goto l125
					}
					position++
					goto l110
				l125:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Î') {
						goto l126
					}
					position++
					goto l110
				l126:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ï') {
						goto l127
					}
					position++
					goto l110
				l127:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ð') {
						goto l128
					}
					position++
					goto l110
				l128:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ñ') {
						goto l129
					}
					position++
					goto l110
				l129:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Œ') {
						goto l130
					}
					position++
					goto l110
				l130:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ò') {
						goto l131
					}
					position++
					goto l110
				l131:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ó') {
						goto l132
					}
					position++
					goto l110
				l132:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ô') {
						goto l133
					}
					position++
					goto l110
				l133:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Õ') {
						goto l134
					}
					position++
					goto l110
				l134:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ö') {
						goto l135
					}
					position++
					goto l110
				l135:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ø') {
						goto l136
					}
					position++
					goto l110
				l136:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ù') {
						goto l137
					}
					position++
					goto l110
				l137:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ú') {
						goto l138
					}
					position++
					goto l110
				l138:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Û') {
						goto l139
					}
					position++
					goto l110
				l139:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ü') {
						goto l140
					}
					position++
					goto l110
				l140:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ý') {
						goto l141
					}
					position++
					goto l110
				l141:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ć') {
						goto l142
					}
					position++
					goto l110
				l142:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Č') {
						goto l143
					}
					position++
					goto l110
				l143:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ď') {
						goto l144
					}
					position++
					goto l110
				l144:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('İ') {
						goto l145
					}
					position++
					goto l110
				l145:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ķ') {
						goto l146
					}
					position++
					goto l110
				l146:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ĺ') {
						goto l147
					}
					position++
					goto l110
				l147:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('ĺ') {
						goto l148
					}
					position++
					goto l110
				l148:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ľ') {
						goto l149
					}
					position++
					goto l110
				l149:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('ľ') {
						goto l150
					}
					position++
					goto l110
				l150:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ł') {
						goto l151
					}
					position++
					goto l110
				l151:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('ł') {
						goto l152
					}
					position++
					goto l110
				l152:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ņ') {
						goto l153
					}
					position++
					goto l110
				l153:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ō') {
						goto l154
					}
					position++
					goto l110
				l154:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ő') {
						goto l155
					}
					position++
					goto l110
				l155:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Œ') {
						goto l156
					}
					position++
					goto l110
				l156:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ř') {
						goto l157
					}
					position++
					goto l110
				l157:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ś') {
						goto l158
					}
					position++
					goto l110
				l158:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ŝ') {
						goto l159
					}
					position++
					goto l110
				l159:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ş') {
						goto l160
					}
					position++
					goto l110
				l160:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Š') {
						goto l161
					}
					position++
					goto l110
				l161:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ÿ') {
						goto l162
					}
					position++
					goto l110
				l162:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ź') {
						goto l163
					}
					position++
					goto l110
				l163:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ż') {
						goto l164
					}
					position++
					goto l110
				l164:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ž') {
						goto l165
					}
					position++
					goto l110
				l165:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('ƒ') {
						goto l166
					}
					position++
					goto l110
				l166:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ǿ') {
						goto l167
					}
					position++
					goto l110
				l167:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ș') {
						goto l168
					}
					position++
					goto l110
				l168:
					position, tokenIndex = position110, tokenIndex110
					if buffer[position] != rune('Ț') {
						goto l108
					}
					position++
				}
			l110:
				if !_rules[ruleWord]() {
					goto l108
				}
				add(ruleCapsWord, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 31 Word <- <(![A-Z] . (!(':' / ' ') .)+ &(_ / END))> */
		func() bool {
			position169, tokenIndex169 := position, tokenIndex
			{
				position170 := position
				{
					position171, tokenIndex171 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l171
					}
					position++
					goto l169
				l171:
					position, tokenIndex = position171, tokenIndex171
				}
				if !matchDot() {
					goto l169
				}
				{
					position174, tokenIndex174 := position, tokenIndex
					{
						position175, tokenIndex175 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l176
						}
						position++
						goto l175
					l176:
						position, tokenIndex = position175, tokenIndex175
						if buffer[position] != rune(' ') {
							goto l174
						}
						position++
					}
				l175:
					goto l169
				l174:
					position, tokenIndex = position174, tokenIndex174
				}
				if !matchDot() {
					goto l169
				}
			l172:
				{
					position173, tokenIndex173 := position, tokenIndex
					{
						position177, tokenIndex177 := position, tokenIndex
						{
							position178, tokenIndex178 := position, tokenIndex
							if buffer[position] != rune(':') {
								goto l179
							}
							position++
							goto l178
						l179:
							position, tokenIndex = position178, tokenIndex178
							if buffer[position] != rune(' ') {
								goto l177
							}
							position++
						}
					l178:
						goto l173
					l177:
						position, tokenIndex = position177, tokenIndex177
					}
					if !matchDot() {
						goto l173
					}
					goto l172
				l173:
					position, tokenIndex = position173, tokenIndex173
				}
				{
					position180, tokenIndex180 := position, tokenIndex
					{
						position181, tokenIndex181 := position, tokenIndex
						if !_rules[rule_]() {
							goto l182
						}
						goto l181
					l182:
						position, tokenIndex = position181, tokenIndex181
						if !_rules[ruleEND]() {
							goto l169
						}
					}
				l181:
					position, tokenIndex = position180, tokenIndex180
				}
				add(ruleWord, position170)
			}
			return true
		l169:
			position, tokenIndex = position169, tokenIndex169
			return false
		},
		/* 32 _ <- <(MultipleSpace / SingleSpace)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				{
					position185, tokenIndex185 := position, tokenIndex
					if !_rules[ruleMultipleSpace]() {
						goto l186
					}
					goto l185
				l186:
					position, tokenIndex = position185, tokenIndex185
					if !_rules[ruleSingleSpace]() {
						goto l183
					}
				}
			l185:
				add(rule_, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 33 MultipleSpace <- <(SingleSpace SingleSpace+)> */
		func() bool {
			position187, tokenIndex187 := position, tokenIndex
			{
				position188 := position
				if !_rules[ruleSingleSpace]() {
					goto l187
				}
				if !_rules[ruleSingleSpace]() {
					goto l187
				}
			l189:
				{
					position190, tokenIndex190 := position, tokenIndex
					if !_rules[ruleSingleSpace]() {
						goto l190
					}
					goto l189
				l190:
					position, tokenIndex = position190, tokenIndex190
				}
				add(ruleMultipleSpace, position188)
			}
			return true
		l187:
			position, tokenIndex = position187, tokenIndex187
			return false
		},
		/* 34 SingleSpace <- <' '> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune(' ') {
					goto l191
				}
				position++
				add(ruleSingleSpace, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 35 END <- <!.> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				{
					position195, tokenIndex195 := position, tokenIndex
					if !matchDot() {
						goto l195
					}
					goto l193
				l195:
					position, tokenIndex = position195, tokenIndex195
				}
				add(ruleEND, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
	}
	p.rules = _rules
	return nil
}
